/**
 * 
 */
package com.liangshan.jianjian.android;

import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.liangshan.jianjian.android.util.JavaLoggingHandler;
import com.liangshan.jianjian.general.Jianjian;

import android.app.Application;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.location.Location;
import android.preference.PreferenceManager;
import android.util.Log;

/**
 * @author jornel
 *
 */
public class Jianjianroid extends Application {
    
    private static final String TAG = "Jianjianroid";
    private static final boolean DEBUG = JianjianSettings.DEBUG;
    
    static {
        Logger.getLogger("com.liangshan.jianjian").addHandler(new JavaLoggingHandler());
        Logger.getLogger("com.liangshan.jianjian").setLevel(Level.ALL);
    }
    
    public static final String PACKAGE_NAME = "com.liangshan.jianjian.android";
    
    private SharedPreferences mPrefs;    
    private String mVersion = null;
    private boolean mIsFirstRun;
    
    private Jianjian mJianjian;
    
    @Override
    public void onCreate() {
        Log.i(TAG, "Using Debug Server:\t" + JianjianSettings.USE_DEBUG_SERVER);
        Log.i(TAG, "Using Dumpcatcher:\t" + JianjianSettings.USE_DUMPCATCHER);
        Log.i(TAG, "Using Debug Log:\t" + DEBUG);
        
        mVersion = getVersionString(this);
        
        // Check if this is a new install by seeing if our preference file exists on disk.
        mIsFirstRun = checkIfIsFirstRun();
        // Setup Prefs (to load dumpcatcher)
        mPrefs = PreferenceManager.getDefaultSharedPreferences(this);
        
    }

    /**
     * @return
     */
    private boolean checkIfIsFirstRun() {
        File file = new File(
        "/data/data/com.liangshan.jianjian.android/shared_prefs/com.liangshan.jianjian.foursquared_preferences.xml");
        return !file.exists();
    }

    /**
     * Constructs the version string of the application.
     * 
     * @param context the context to use for getting package info
     * @return the versions string of the application
     */
    private static String getVersionString(Context context) {
        // Get a version string for the app.
        try {
            PackageManager pm = context.getPackageManager();
            PackageInfo pi = pm.getPackageInfo(PACKAGE_NAME, 0);
            return PACKAGE_NAME + ":" + String.valueOf(pi.versionCode);
        } catch (NameNotFoundException e) {
            if (DEBUG) Log.d(TAG, "Could not retrieve package info", e);
            throw new RuntimeException(e);
        }
    }

    /**
     * @return
     */
    public Jianjian getJianjian() {
        // TODO Auto-generated method stub
        return mJianjian;
    }

    /**
     * @return
     */
    public Location getLastKnownLocation() {
        // TODO Auto-generated method stub
        return null;
    }
    

}
